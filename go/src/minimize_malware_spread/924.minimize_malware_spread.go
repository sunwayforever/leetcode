// 2018-11-05 09:56
package main

import (
	"fmt"
	"sort"
)

func minMalwareSpread(graph [][]int, initial []int) int {
	sort.Ints(initial)
	N := len(graph)

	visited := map[int]bool{}
	initialSet := map[int]bool{}
	for _, v := range initial {
		initialSet[v] = true
	}

	maxInfected := -1
	bestNode := -1

	for _, v := range initial {
		if visited[v] {
			continue
		}
		queue := []int{v}
		visited[v] = true

		infected := 0
		isolated := true
		for len(queue) != 0 {
			infected++
			top := queue[0]
			queue = queue[1:]
			for i := 0; i < N; i++ {
				if graph[top][i] == 1 && !visited[i] && i != top {
					queue = append(queue, i)
					visited[i] = true
					if initialSet[i] {
						isolated = false
					}
				}
			}
		}
		if isolated && infected > maxInfected {
			maxInfected = infected
			bestNode = v
		}
	}
	if bestNode == -1 {
		return initial[0]
	}
	return bestNode
}

func main() {
	fmt.Println(minMalwareSpread([][]int{
		{1, 0, 0, 0},
		{0, 1, 0, 0},
		{0, 0, 1, 1},
		{0, 0, 1, 1},
	}, []int{1, 3}))
}
